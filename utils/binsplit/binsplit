#!/usr/bin/env python2
import os
import subprocess

def binwalk(path):
    p = subprocess.Popen(['binwalk', path], stdout=subprocess.PIPE)
    return p.communicate('')[0]

def split(out, path, start, end):
    print('%-15s 0x%x - 0x%x' % (os.path.basename(out), start, end))
    with open(out, 'wb') as o:
        with open(path, 'rb') as f:
            f.seek(start)
            length = end - start
            align = length % 1024
            for i in xrange(0, length - align, 1024):
                o.write(f.read(1024))
            if align:
                o.write(f.read(align))

def binsplit(path, walk):
    base = os.path.basename(path)
    i = 1
    out = base + '.split'
    while True:
        if os.path.exists(out):
            out = '%s.split.%d' % (base, i)
            i += 1
            continue
        try:
            os.mkdir(out)
            break
        except OSError as e:
            if os.path.exists(out):
                continue
            raise e

    last_pos = 0
    suffix = 'header'
    i = 0
    for line in walk.split('\n')[3:]:
        if not line.strip():
            continue
        pos = int(line.split()[0])
        split(os.path.join(out, '%d.%s' % (i, suffix)), path, last_pos, pos)
        suffix = line.split()[2].lower()
        last_pos = pos
        i += 1
    
    split(os.path.join(out, '%d.%s' % (i, suffix)), path, last_pos, os.stat(path).st_size)

if __name__ == '__main__':
    import sys
    if len(sys.argv) != 2:
        print('Usage: %s <file>' % sys.argv[0])
        sys.exit(1)

    print('Running binwalk.')
    out = binwalk(sys.argv[1])
    print('--------')
    binsplit(sys.argv[1], out)
