#!/usr/bin/python
# shotgun: quickly and intelligently convert input to several formats

import re
import sys
import base64
import struct
import binascii

hx = lambda s: ' '.join('%02x' % ord(c) for c in s)
printable = lambda s: re.sub(r'[^\x20-\x7E]', '.', s)

def hex_format(data):
    ret = ['hex:']
    for i in xrange(0, len(data), 16):
        s = data[i:i+16]
        s1, s2 = s[0:8], s[8:16]
        ret.append(' %08x %s  %s  |%s|' % (
            i, hx(s1).ljust(23), s2 and hx(s2).ljust(23) or '', printable(s)
        ))

    ret.append(' %08x' % len(data))

    return '\n'.join(ret)

def endian_swap(num):
    if num <= 2 ** 32:
        packed = struct.pack('<I', num)
        return struct.unpack('>I', packed)[0]
    else:
        packed = struct.pack('<Q', num)
        return struct.unpack('>Q', packed)[0]

def numbers(num):
    # TODO: binary int <--> float?
    swapped = endian_swap(num)
    ret = [
        ' bin: %12s' % bin(num).replace('0b', '', 1),
    # octal is disabled to save space
    #   ' oct: %12s' % oct(num),
        ' int: %12s | %s' % (int(num), int(swapped)),
        ' hex: %12s | %s' % (hex(num), hex(swapped))
    ]

    return '\n'.join(str(x) for x in ret)

def unhex(hexd):
    if isinstance(hexd, int):
        hexd = hex(hexd)
    if hexd.startswith('0x'):
        hexd = hexd[2:]
    if len(hexd) % 2:
        hexd = '0' + hexd
    return printable(binascii.unhexlify(hexd))

def convert(data):
    # strip whitespace and nulls for numerical representation
    filtered = re.sub(r'[\s\0]', '', data)

    ret = []

    # don't know if octal is actually useful
    octf = False and re.match(r'^0?([0-7]+)$', filtered)

    binf = re.match(r'^(0b)?([01]+)$', filtered)
    decf = re.match(r'^(\d+)$', filtered)
    hexf = re.match(r'^(0x)?([0-9A-Fa-f]+)$', filtered)
    b64f = re.match(r'^([A-Za-z\d+/]+)(={1,3})?$', filtered)

    ascii = hex_format(data)
    try:
        hdata = binascii.hexlify(data)
        bint = int(hdata, 16)
        ascii += '\n\n' + numbers(bint)
    except Exception:
        pass
    ret.append(('ascii', ascii))

    if b64f:
        b64 = b64f.group(1)
        if len(b64) >= 2:
            # add padding if needed
            b64 += (len(b64) % 4) * '='
            try:
                ascii = base64.b64decode(b64)
                if b64 == base64.b64encode(ascii):
                    ret.append(('base64', hex_format(ascii)))
            except TypeError:
                pass

    if binf:
        n = int(binf.group(2), 2)
        ret.append(('bin', numbers(n)))

    if octf:
        n = int(octf.group(1), 8)
        ret.append(('oct', numbers(n)))

    if decf:
        n = int(decf.group(1), 10)
        ret.append((
            'dec',
            numbers(n) + '\n'
            ' ascii: ' + unhex(n)
        ))

    if hexf:
        hexd = hexf.group(2)
        n = int(hexd, 16)

        ret.append((
            'hex',
            numbers(n) + '\n'
            ' ascii: ' + unhex(hexd)
        ))

    return ret

def pretty(data):
    ret = convert(data)
    print
    print 'length:', len(data)

    for key, value in ret:
        print
        print '---====[ %s ]====---' % key
        print value

    print

if __name__ == '__main__':
    if not sys.stdin.isatty():
        data = sys.stdin.read()
        pretty(data)
    elif len(sys.argv) > 1:
        data = ' '.join(sys.argv[1:])
        pretty(data)
    else:
        try:
            print 'Shotgun:',
            print 'quickly and intelligently',
            print 'convert input to several formats'
            print '(^D or ^C to exit)'
            print
            while True:
                print '-' * 79
                line = raw_input(' ?> ')
                pretty(line)

        except KeyboardInterrupt:
            pass
        except EOFError:
            pass

        print
